/**
 * This class is responsible for displaying what is inside of the GamePanel at
 * the current time. Not much else.
 */
package bloxorz;

import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;

public class Window extends javax.swing.JFrame {

	HashSet<Map> mapsSet;
	Map currentMap;
	int playerRow, playerCol;

	static final File FILE_LOCATION = new File("mapsSet.set");

	/**
	 * Creates new form Window
	 */
	public Window() {
		initComponents();
		this.addKeyListener(gamePanel);

		/**
		 * Adds event listener to <textArea_Map> to listen for changes in the
		 * layout on the level editor screen. On each update, the panel will
		 * redraw the map to reflect the changes.
		 */
		textArea_Map.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void insertUpdate(DocumentEvent e) {
				levelEditorPanel.StringTo2DArray(textArea_Map.getText());
				updateCurrentMap();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				levelEditorPanel.StringTo2DArray(textArea_Map.getText());
				updateCurrentMap();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				levelEditorPanel.StringTo2DArray(textArea_Map.getText());
				updateCurrentMap();
			}
		});

		/**
		 * Adds selection listener to <mapsList> in order to show the preview of
		 * the map in real time. Each time a new map is selected, the panel will
		 * redraw the map.
		 */
		mapsList.addListSelectionListener((ListSelectionEvent e) -> {
			previewMap();
		});
		
		readMapsFromDisk();
		
		try {
			// sets a random map on load
			int arrayOfMap = (int)(Math.random() * mapsSet.size());
			currentMap = (Map)mapsSet.toArray()[arrayOfMap];

			gamePanel.setCurrentGame(currentMap);
			gamePanel.repaint();
		} catch (ArrayIndexOutOfBoundsException ex ){
			gamePanel.setCurrentGame(gamePanel.TEST_MAP);
			gamePanel.repaint();
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        levelEditor = new javax.swing.JFrame();
        updateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea_Map = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        textArea_Key = new javax.swing.JTextArea();
        levelEditorPanel = new bloxorz.LevelEditorPanel();
        saveButton = new javax.swing.JButton();
        levelSelector = new javax.swing.JFrame();
        levelSelectorPanel = new bloxorz.levelSelectorPanel();
        buttonPreview = new javax.swing.JButton();
        buttonLoad = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        mapsList = new javax.swing.JList();
        gamePanel = new bloxorz.GamePanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItem_LevelEditor = new javax.swing.JMenuItem();
        menuItem_LevelSelector = new javax.swing.JMenuItem();
        menuItem_reset = new javax.swing.JMenuItem();

        levelEditor.setAlwaysOnTop(true);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        textArea_Map.setColumns(20);
        textArea_Map.setFont(new java.awt.Font("Source Code Pro", 0, 13)); // NOI18N
        textArea_Map.setRows(5);
        jScrollPane1.setViewportView(textArea_Map);

        textArea_Key.setEditable(false);
        textArea_Key.setColumns(20);
        textArea_Key.setFont(new java.awt.Font("Source Code Pro", 0, 12)); // NOI18N
        textArea_Key.setRows(5);
        textArea_Key.setText("\"X\" - default tile\n\"P\" - player start pos.\n\"H\" - exit hole\n\" \" - gap in the floor\n");
        jScrollPane3.setViewportView(textArea_Key);

        javax.swing.GroupLayout levelEditorPanelLayout = new javax.swing.GroupLayout(levelEditorPanel);
        levelEditorPanel.setLayout(levelEditorPanelLayout);
        levelEditorPanelLayout.setHorizontalGroup(
            levelEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );
        levelEditorPanelLayout.setVerticalGroup(
            levelEditorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        saveButton.setText("Save Map");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout levelEditorLayout = new javax.swing.GroupLayout(levelEditor.getContentPane());
        levelEditor.getContentPane().setLayout(levelEditorLayout);
        levelEditorLayout.setHorizontalGroup(
            levelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(levelEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(levelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addGroup(levelEditorLayout.createSequentialGroup()
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        levelEditorLayout.setVerticalGroup(
            levelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelEditorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelEditorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(levelEditorLayout.createSequentialGroup()
                        .addGroup(levelEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateButton)
                            .addComponent(saveButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        levelSelectorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout levelSelectorPanelLayout = new javax.swing.GroupLayout(levelSelectorPanel);
        levelSelectorPanel.setLayout(levelSelectorPanelLayout);
        levelSelectorPanelLayout.setHorizontalGroup(
            levelSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );
        levelSelectorPanelLayout.setVerticalGroup(
            levelSelectorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        buttonPreview.setText("Preview");
        buttonPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviewActionPerformed(evt);
            }
        });

        buttonLoad.setText("Load");
        buttonLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadActionPerformed(evt);
            }
        });

        mapsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(mapsList);

        javax.swing.GroupLayout levelSelectorLayout = new javax.swing.GroupLayout(levelSelector.getContentPane());
        levelSelector.getContentPane().setLayout(levelSelectorLayout);
        levelSelectorLayout.setHorizontalGroup(
            levelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(levelSelectorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(levelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPreview, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(buttonLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        levelSelectorLayout.setVerticalGroup(
            levelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelSelectorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(levelSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(levelSelectorLayout.createSequentialGroup()
                        .addComponent(buttonPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonLoad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                    .addComponent(levelSelectorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        menuItem_LevelEditor.setText("Level Editor");
        menuItem_LevelEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_LevelEditorActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_LevelEditor);

        menuItem_LevelSelector.setText("Level Selector");
        menuItem_LevelSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_LevelSelectorActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_LevelSelector);

        menuItem_reset.setText("Restart Level");
        menuItem_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItem_resetActionPerformed(evt);
            }
        });
        jMenu1.add(menuItem_reset);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
		levelEditorPanel.StringTo2DArray(textArea_Map.getText());
		updateCurrentMap();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void menuItem_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_resetActionPerformed
		gamePanel.startGame();
    }//GEN-LAST:event_menuItem_resetActionPerformed

    private void menuItem_LevelEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_LevelEditorActionPerformed
		openLevelEditor();
    }//GEN-LAST:event_menuItem_LevelEditorActionPerformed

	/**
	 * This button will save the current layout to the HashSet of maps. Each
	 * time it is saved, the HashSet will be written to the disk so it can be
	 * read each time the game launches.
	 */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
		updateButtonActionPerformed(evt);
//		System.out.println(currentMap);
		mapsSet.add(currentMap);
		writeMapsToDisk();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void buttonPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviewActionPerformed
		previewMap();

    }//GEN-LAST:event_buttonPreviewActionPerformed

    private void buttonLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadActionPerformed
		loadSelectedMap();
		levelSelector.dispose();
    }//GEN-LAST:event_buttonLoadActionPerformed

    private void menuItem_LevelSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_LevelSelectorActionPerformed
		openLevelSelector();
    }//GEN-LAST:event_menuItem_LevelSelectorActionPerformed

	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> {
			new Window().setVisible(true);
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLoad;
    private javax.swing.JButton buttonPreview;
    private bloxorz.GamePanel gamePanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JFrame levelEditor;
    private bloxorz.LevelEditorPanel levelEditorPanel;
    private javax.swing.JFrame levelSelector;
    private bloxorz.levelSelectorPanel levelSelectorPanel;
    private javax.swing.JList mapsList;
    private javax.swing.JMenuItem menuItem_LevelEditor;
    private javax.swing.JMenuItem menuItem_LevelSelector;
    private javax.swing.JMenuItem menuItem_reset;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea textArea_Key;
    private javax.swing.JTextArea textArea_Map;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

	/**
	 * This method takes the file mapsSet.set and reads it in to store the maps
	 * for the level selection screen.
	 */
	private void readMapsFromDisk() {
		try {
			FileInputStream fis = new FileInputStream(FILE_LOCATION);
			try (ObjectInputStream ois = new ObjectInputStream(fis)) {
				mapsSet = (HashSet<Map>) ois.readObject();
			}
		} catch (FileNotFoundException ex) {
			mapsSet = new HashSet<>();
		} catch (IOException | ClassNotFoundException ex) {
			Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called each time a new map is loaded in order to set this
	 * player position correctly, as well as update the visuals of the map
	 * layout.
	 */
	private void updateCurrentMap() {
		getPlayerCoordinates();
		currentMap = new Map(levelEditorPanel.mapArray, playerRow, playerCol);
		currentMap.setPosX(playerCol);
		currentMap.setPosY(playerRow);
	}

	/**
	 * This method locates the "P" within the map array and sets the player's
	 * row and column to be used during rendering.
	 */
	private void getPlayerCoordinates() {
		String[][] mapArray = levelEditorPanel.mapArray;
		for (int r = 0; r < mapArray.length; r++) {
			for (int c = 0; c < mapArray[0].length; c++) {
				if ("P".equals(mapArray[r][c])) {
					playerRow = r;
					playerCol = c;
				}
			}
		}
	}

	/**
	 * This method writes the mapsSet to a predefined file within the working
	 * directory of the program. The file only contains the mapsSet and will be
	 * read in each time the level selector is opened.
	 */
	private void writeMapsToDisk() {
		try {
			FileOutputStream fos = new FileOutputStream(FILE_LOCATION);
			try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
				oos.writeObject(mapsSet);
			}

		} catch (Exception ex) {
			System.err.println(ex);
		}
	}

	/**
	 * This method opens the level selector menu by setting it to visible and
	 * setting the dimensions. It also populates the list of maps available to
	 * choose from based off the file of maps already saved.
	 */
	public void openLevelSelector() {
		levelSelector.setEnabled(true);
		levelSelector.setVisible(true);
		levelSelector.setSize(new Dimension(800, 600));

		String[] listOptions = new String[mapsSet.size()];
		for (int i = 0; i < mapsSet.size(); i++) {
			listOptions[i] = "Map " + (i + 1);
		}

		mapsList.setListData(listOptions);
	}

	/**
	 * This method loads the selected map into the GamePanel. It gets the index
	 * of the map selected in the level selector window, gets the map from the
	 * maps set, and loads it in to the game.
	 */
	private void loadSelectedMap() {
		int selectedIndex = mapsList.getSelectedIndex();
		if (selectedIndex >= 0) {
			currentMap = (Map) mapsSet.toArray()[selectedIndex];
			gamePanel.setCurrentGame(currentMap);

			gamePanel.repaint();
		}
	}

	/**
	 * This method is called each time the preview action is performed in order
	 * to visually display the map in the level selector without actually
	 * changing the map in the Window.
	 */
	private void previewMap() {
		int selectedIndex = mapsList.getSelectedIndex();
		if (selectedIndex >= 0) {
			Map tempMap = (Map) mapsSet.toArray()[selectedIndex];
			levelSelectorPanel.setMapArray(tempMap.layout);
		}
	}

	/**
	 * This method opens the level editor and sets the dimensions in order to
	 * prevent it from only having the close, maximize, and minimize buttons
	 * visible.
	 */
	private void openLevelEditor() {
		levelEditor.setEnabled(true);
		levelEditor.setVisible(true);
		levelEditor.setSize(new Dimension(800, 600));
	}
}
